define(["require", "exports"], function (require, exports) {
    /**
     * implemation of es6 Object.assfign
     *
     * @param	target	the object which will receive new attributes
     * @param	sources	sources which will be combined into target
     * @return			target (modified by reference)
     */
    function assign(target) {
        var sources = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            sources[_i - 1] = arguments[_i];
        }
        if (target === undefined || target === null) {
            throw 'Cannot convert first argument to object';
        }
        var to = Object(target);
        sources.forEach(function (source) {
            if (source === undefined || source === null) {
                return;
            }
            var keys = Object.keys(Object(source));
            keys.forEach(function (key) {
                var desc = Object.getOwnPropertyDescriptor(source, key);
                if (desc !== undefined && desc.enumerable) {
                    to[key] = source[key];
                }
            });
        });
        return to;
    }
    exports.assign = assign;
});
