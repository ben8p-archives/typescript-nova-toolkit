nova.js

Framework javascript
Note :
Connect & Disconnect from John Resig (http://ejohn.org/projects/flexible-javascript-events/)
Convert froms domNode in url encoded string from Dojo tookit (http://dojotoolkit.org)
getElementsByAnything from Matthew Pennell (http://www.javascriptsearch.com/guides/Advanced/articles/0607ABetterDollarFunction.html)
UTF-8 <=> UTF-16 convertion from Masanao Izumo (iz@onicos.co.jp)
JavaScript to PHP serialize / unserialize class from Ma Bingyao (andot@ujn.edu.cn / http://www.coolcode.cn/?p=171)
Shortcut adding from Binny V A (http://www.openjs.com/scripts/events/keyboard_shortcuts/)
Tooltip positioning from scriptaculous (http://www.illustate.com/playground/scriptaculous/tooltip/)
Sortable TABLE from Stuart Langridge (http://www.kryogenix.org/code/browser/sorttable/)

Defined in nova.js

Constructor Summary
	nova()
          Nova's object
	nova.clone(<Object> what, <bool> rec)
          clone a JS object
	nova.config()
          Nova's config namespace
	nova.browser()
          nova's browser namespace
	nova.effects()
          Nova's effect namespace
	nova.slider()
          Nova's slider namespace
	nova.string()
          Nova's string namespace
	nova.lightbox()
          Nova's lighbox namespace
To add a custom style on the dock window, create the css class #lightbox_dock { }
To add a custom style on the picture window, create the css class #lightbox_image { }
To add a loading picture, place a backgroundImage centered in #lightbox_dock
	nova.html()
          Nova's html namespace
	nova.dom()
          Nova's DOM namespace
	nova.variable()
          Nova's variable namespace
	nova.variable.array()
          Array subnamespace
	nova.variable.array.object()
          Object subnamespace
	nova.topic()
          Nova's topic namespace
	nova.dnd()
          Nova's Drang'n Drop namespace
	nova.debug()
          Nova's debug namespace
	nova.io()
          Nova's IN/OUT namespace
	nova.tooltip()
          Nova's tooltip object
	nova.shortcut()
          Nova's shortcut object
	nova.table()
          Nova's tabel namespace
	nova.form()
          Nova's forms namespace
Bool, Function	nova.form.validation(<String> methode)
          Validation's form subnamespace

Ajouter une contrainte a un champs (le 3eme parametre pointe sur une fonction)
Le parametre de la fonction (3eme arguments) est le contenu du champs désigné
Applique la classe .constraint
nova.form.validation.connect(document.getElementById('pseudo'), 'constraint',function() { if (arguments[0].length==3) return true; else return false;});

Verifier certaines chose avant la validation :
Le parametre de la fonction (3eme arguments) est le contenu du champs désigné
nova.form.validation.connect(document.getElementById('forms'), 'beforevalidate',function() { if (arguments[0].length==3) return true; else return false;});
Forcer la selection complete du contenu
nova.form.validation.connect(document.getElementById('pseudo'), 'selectall');

Verifie que le contenu est bien un nombre
Applique la classe .isnum
nova.form.validation.connect(document.getElementById('mdp'), 'isnum');

Verifie que le contenu est bien un nombre entier
Applique la classe .isint
nova.form.validation.connect(document.getElementById('mdp'), 'isint');

Verifie que le contenu est bien du type alphabetique
Applique la classe .isalpha
nova.form.validation.connect(document.getElementById('mdp'), 'isalpha');

Verifie que le contenu est bien du type alphanumérique
Applique la classe .isalphanum
nova.form.validation.connect(document.getElementById('mdp'), 'isalphanum');

Verifie que le contenu est bien du type email
Applique la classe .ismail
nova.form.validation.connect(document.getElementById('eml'), 'ismail')

Rendre un champs obligatoire
Applique la classe .mendatory
nova.form.validation.connect(document.getElementById('mdp'), 'mendatory');

Verifier la complexité d'un mot de passe
Applique un style qui modifie la couleur de fond de l'input
nova.form.validation.connect(document.getElementById('mdp'), 'complexity');

Vérifier qu'un champs est la copie d'un autre (le 3eme argument designe un objet)
Applique la classe .copyof
nova.form.validation.connect(document.getElementById('mdpverif'), 'copyof',document.getElementById('mdp'));

Vérifier qu'un champs correspond bien a une expression réguliere
Applique la classe .matchregexp
nova.form.validation.connect(document.getElementById('mdpverif'), 'matchregexp',/[a-zA-Z]/);

Verifier qu'un formulaire est valide (le 3eme parametre est facultatif et point sur une fonction)
Le parametre de la fonction (3eme arguments) est un tableau qui contient les champs en erreur
nova.form.validation.connect(document.getElementById('adduser'), 'validate',function() {alert("erreur !")});

Rafraichi tous les evenements connecté a un objet
document.getElementById('mdpverif').refresh();

Pour Deconnecter un evenement d'un objet, utiliser la même syntaxe que pour le connecter mais avec le mot disconnect.
nova.form.validation.disconnect(document.getElementById('adduser'), 'validate',function() {alert("erreur !")});

------------------------------------------------------
Exemple :
<code>
<style type="text/css">input.mendatory,input.constraint,input.copyof,input.isnum,input.isint,input.isalpha,input.isalphanum,input.matchregexp {background-color:red;}</style>
<form method="post" action="" id="adduser">
<fieldset>
<legend>Inscription</legend>
<label> Pseudo : </label><input type="text" name="pseudo" id="pseudo" /><br />
<label> Mot de passe : </label><input type="password" name="mdp" id="mdp" /><br />
<label> Confirmation : </label><input type="password" name="mdpverif" id="mdpverif" /><br />
<input type="submit" value="ok" />

<input type="button" value="disconnect" onclick="test();" />
<input type="button" value="refresh" onclick="test2();" />
</fieldset>
</form>
<script type="text/javascript">
nova.form.validation.connect(document.getElementById('pseudo'), 'constraint',function() { if (arguments[0].length==3) return true; else return false;});
nova.form.validation.connect(document.getElementById('pseudo'), 'selectall');

nova.form.validation.connect(document.getElementById('mdp'), 'selectall');
nova.form.validation.connect(document.getElementById('mdp'), 'mendatory');
nova.form.validation.connect(document.getElementById('mdp'), 'complexity');

nova.form.validation.connect(document.getElementById('mdpverif'), 'selectall');
nova.form.validation.connect(document.getElementById('mdpverif'), 'copyof',document.getElementById('mdp'));

nova.form.validation.connect(document.getElementById('adduser'), 'validate',function() {console.log(arguments[0].length);for (i=0;i!=arguments[0].length;i++) {console.log("erreur :"+arguments[0][i]);}});

function test() {
nova.form.validation.disconnect(document.getElementById('pseudo'), 'constraint');
nova.form.validation.disconnect(document.getElementById('mdp'), 'selectall');
nova.form.validation.disconnect(document.getElementById('mdp'), 'mendatory');
nova.form.validation.disconnect(document.getElementById('mdp'), 'complexity');
}
function test2() {
document.getElementById('mdp').value="plop";
document.getElementById('mdp').refresh();
}

</script>
</code>
 
Details
nova

    Nova's object

nova.connect

    Attach [type] event on [obj]

    Parameters:
        Object obj - the object
        String type - the type of connection ("click,"keyup",etc...)
        function methode - the function to connect 

nova.disconnect

    Dettach [type] event from [obj]

    Parameters:
        Object obj - the object
        String type - the type of connection ("click,"keyup",etc...)
        function methode - the function to disconnect 

nova.clone

    clone a JS object

    Parameters:
        Object what - the object you want to clone
        bool rec - toggle recursivity 

nova.clone.setTimeOut

    like classical setTimeOut but preserv context

    Parameters:
        Function fn - the function you want to delay
        Object delay - the delay
        Object _this - the context you want to have in this
    Returns:
        handle handle to the timeout method 

nova.clone.setInterval

    like classical setInterval but preserv context

    Parameters:
        Function fn - the function you want to delay
        Object delay - the delay
        Object _this - the context you want to have in this
    Returns:
        handle handle to the interval method 

nova.config

    Nova's config namespace

nova.config.debug

    toggle debug mode

    Parameters:
        Bool bool - put debug on true or false 

nova.browser

    nova's browser namespace

nova.effects

    Nova's effect namespace

nova.effects.addToQueue

    Add function/method in the queue list

    Parameters:
        Function fn - effect function
        Object obj - the object to effect
        Object object - with a least 1 property : {duration: 00} (duration the duration of the effect is in ms) 

nova.effects.queueNext

    Launch the queue. It stop when all queued effect are displayed

nova.effects.fadeIn

    FadeIn effect on obj

    Parameters:
        Object obj - the object to fade
        Object params - object with 3 properties : {duration: 00, from : 00, to: 00} (the duration of the effect is in ms)
        Bool fromQueue - true if lauch from queue 

nova.effects.fadeOut

    FadeOut effect on obj

    Parameters:
        Object obj - the object to fade
        Object params - object with 3 properties : {duration: 00, from : 00, to: 00} (the duration of the effect is in ms)
        Bool fromQueue - true if lauch from queue
        Object obj - the object to fade
        Object params - object with 4 properties : {duration: 00, fadeIn: true, from : 00, to : 00} (the duration of the effect is in ms)
        Bool true - if the effect is lauch by queue list 

nova.effects.moveTo

    Move an object

    Parameters:
        Object obj - the object to fade
        Object params - object with 3 properties : {left : 00, top: 00, duration: 00} (the duration of the effect is in ms)
        Bool fromQueue - true if lauch from queue 

nova.effects.resize

    Resize an object

    Parameters:
        Object obj - the object to fade
        Object params - object with 3 properties : {width : 00, height: 00, duration: 00} (the duration of the effect is in ms)
        Bool fromQueue - true if lauch from queue 

nova.effects.slideUp

    slideUp effect on obj

    Parameters:
        Object obj - the object to fade
        Object params - object with 1 properties : {duration: 00} (the duration of the effect is in ms)
        Bool fromQueue - true if lauch from queue 

nova.effects.slideDown

    slideDown effect on obj

    Parameters:
        Object obj - the object to fade
        Object params - object with 1 or properties : {duration: 00, height : 00} (the duration of the effect is in ms)
        Bool fromQueue - true if lauch from queue
        Object obj - the object to fade
        Object params - object with 2 properties : {duration: 00, slideUp: true} (the duration of the effect is in ms)
        Bool true - if the effect is lauch by queue list 

nova.slider

    Nova's slider namespace

nova.slider.connect

    Connect a slide on ul obj


    props exemple :
    {
    className : "myCSSStyle",
    }

    Parameters:
        Object obj - the ul obj to connect slide
        Object props - all props (see exemple) 

nova.slider.disconnect

    Disconnect a slide from ul obj

    Parameters:
        Object obj - the ul obj to disconnect slide
        Object obj - li object
        Object evt - events object
    Returns:
        Object 

nova.string

    Nova's string namespace

nova.string.htmlDecode

    revert htmlEncode

    Parameters:
        String str - string to encode
    Returns:
        String 

nova.string.htmlEncode

    encode a string in html format

    Parameters:
        String str - string to encode
    Returns:
        String 

nova.string.trim

    trim space before and after a string

    Parameters:
        String str - the str to strim
    Returns:
        string 

nova.lightbox

    Nova's lighbox namespace
    To add a custom style on the dock window, create the css class #lightbox_dock { }
    To add a custom style on the picture window, create the css class #lightbox_image { }
    To add a loading picture, place a backgroundImage centered in #lightbox_dock

nova.lightbox.init

    init the lightbox

    Parameters:
        Object | Array obj - an object or an array of object to apply lightbox
        Object _this - object with to to img
        String src - link to image
        Object _this - object with to to img 

nova.html

    Nova's html namespace

nova.html.addClass

    Add a class on object

    Parameters:
        Object obj - your object
        String classN - the class you want to add 

nova.html.hasClass

    Check if an object has (or not) a class

    Parameters:
        Object obj - your object
        String classN - the class you want to check
    Returns:
        Bool true if class exist 

nova.html.removeClass

    Remove a class on object

    Parameters:
        Object obj - your object
        String classN - the class you want to remove 

nova.html.setClass

    Replace all class by another on object

    Parameters:
        Object obj - your object
        String classN - the classes you want to set 

nova.html.setStyle

    Replace all style by another on object

    Parameters:
        Object obj - your object
        Object style - style description 

nova.html.setOpacity

    Set the opacity of obj

    Parameters:
        Object obj - the obj to set
        Object opacity - the opacity value (between 0 and 1) 

nova.html.toggleClass

    toggle a class on object

    Parameters:
        Object obj - your object
        String classN - the class you want to toggle 

nova.dom

    Nova's DOM namespace

nova.dom.getElementsByAnything

    get Dom elements by anything (name,tagname,id,class,selector,....)
    Can have much than one parameters

    Parameters:
        String mixed - Selectors (#myid, div>ul>li, .myclass, ...)
    Returns:
        Array || Object An array with all matching objects or just one objects (if no more) 

nova.dom.getDomOffset

    Return the Dom offset for an object

    Parameters:
        Object Obj - your object
        String Prop - the offset you want to know (left,top,height,width...)
    Returns:
        Int The dom offset 

nova.dom.getMousePos

    Get the mouse position from the event

    Parameters:
        Object e - An Event object
    Returns:
        Object x and y proprerties 

nova.dom.hideNotZindexedElements

    Hide Some elements wich not affected by Zindex (in IE)

nova.dom.showNotZindexedElements

    Show Some elements wich not affected by Zindex (in IE)

nova.dom.moveNodeTo

    Move a node in other node

    Parameters:
        Object node - the node you want to move
        Object newParent - the parent of your node
    Returns:
        Object the node 

nova.dom.removeNode

    Completly remove a node from DOM

    Parameters:
        Object node - the node to remove
        Bool completlyRemove - if true, destroy de reference
    Returns:
        Object || null the removed node or null 

nova.dom.getViewportSize

    Return an obejct with the viewport size

    Returns:
        Object like {width:xxx, height:yyy} 

nova.dom.getDocumentScrollPosition

    Get the position of the document scroolbar

    Returns:
        Object like {left:xxx, top:yyy} 

nova.dom.getPreviousNode

    Get the previous node in the DOM tree

    Parameters:
        Object obj - start object
    Returns:
        null|DomObject 

nova.dom.getNextNode

    Get the next node in the DOM tree

    Parameters:
        Object obj - start object
    Returns:
        null|DomObject 

nova.dom.getParentNode

    get the parent of an object

    Parameters:
        Object el - starting object
        String pTagName - filter parent tag
    Returns:
        Object 

nova.dom.centerObjectOnViewport

    Place an object on viewport's center

    Parameters:
        Object obj - you dom object 

nova.variable

    Nova's variable namespace

nova.variable.inArray

    Return false if [valeur] isn't in [array] else return index

    Parameters:
        Array array - your array to check
        String value - the value to search
    Returns:
        False || Int dont forget use ===false to prevent 0 index 

nova.variable.isArray

    Check if [v] is an Array

    Parameters:
        Mixed v - your variable
    Returns:
        bool true or false 

nova.variable.isFunction

    Check if [v] is a function

    Parameters:
        Mixed v - your variable
    Returns:
        bool true or false 

nova.variable.isSet

    Check if arguments[0] is defined

    Parameters:
        Mixed mixed - your variable
    Returns:
        bool true or false 

nova.variable.isString

    Check if [v] is a String

    Parameters:
        Mixed v - your variable
    Returns:
        bool true or false 

nova.variable.isObject

    Check if [v] is an Object

    Parameters:
        Mixed v - your variable
    Returns:
        bool true or false 

nova.variable.utf16to8

    Convert data from utf16 to utf8

    Parameters:
        String str - your utf16 string
    Returns:
        String new utf8 string 

nova.variable.utf8to16

    Convert data from utf8 to utf16

    Parameters:
        String str - your utf8 string
    Returns:
        String new utf16 string 

nova.variable.serialize

    This class is designed to convert javascript variables to php with a php serialize
    compatible way.

    Parameters:
        Mixed o - what you want to serialize
    Returns:
        string the serialized string 

nova.variable.unserialize

    This class is designed to convert php variables to javascript with a php unserialize
    compatible way.

    Parameters:
        String ss - what you want to unserialize
    Returns:
        Mixed 

nova.variable.array

    Array subnamespace

nova.variable.array.insert

    Insert [value] at [i] position in [array]

    Parameters:
        Array array - your array
        Int i - the insert index
        Mixed value - what you want to insert
    Returns:
        Array the new array 

nova.variable.array.object

    Object subnamespace

nova.variable.array.object.toArray

    Convert a simple object in Array object

    Parameters:
        Object obj - your object
        Bool preserveKey - set at true if you want to conserve properties name
    Returns:
        Array 

nova.topic

    Nova's topic namespace

nova.topic.subscribe

    Defined a new topic

    Parameters:
        String name - name of the new topic
        Function action - function to do when topic is published 

nova.topic.unsubscribe

    Remove a topic

    Parameters:
        String name - the name of the topic you want to delete 

nova.topic.publish

    Publish a new event on specified topic.
    Give [_this] for context use

    Parameters:
        String name - the name of the topic you want to publish
        Object _this - the context you want to pass to you topic
    Returns:
        Bool 

nova.dnd

    Nova's Drang'n Drop namespace

nova.dnd.connectDragObject

    Initialize dnd on objects

    Parameters:
        array objects - an array with object you want to drag
        string constraint - (optional) "x" or "y" to disallow move on the specified axis 

nova.dnd.connectDropObject

    initialize dnd drop zone

    Parameters:
        Object objects - an array with object you want to drag in 

nova.dnd.dragStart

    When you click down an object

    Parameters:
        Object e - the Events object fired by browser 

nova.dnd.dragEnd

    When you click up an object

    Parameters:
        Object e - the Events object fired by browser 

nova.dnd.dragMove

    When you move an object after a click down

    Parameters:
        Object e - the Events object fired by browser 

private
nova.dnd._getNodeUnderMouse

    Get the element under the mouse

    Parameters:
        Object e - the events fired by browser
    Returns:
        Object || false object under mouse (false if no dropzone was under mouse) 

nova.debug

    Nova's debug namespace

nova.debug.var_dump

    Show a dump of [v] in firebug

    Parameters:
        Mixed v - the dumped variable 

nova.debug.show

    Show a debug message

    Parameters:
        Mixed whant - to want to see in firebug 

nova.debug.raiseError

    Raise a debug message

    Parameters:
        String msg - your error message
    Returns:
        Bool always false 

nova.io

    Nova's IN/OUT namespace

nova.io.send

    Send an XHR request

    <code>
    args {
    file:"page.htm",
    method:"POST" || "GET",
    queryString:"var1=a&var2=b",
    formNode:document.getElementById("test"),
    onLoad:function () {},
    onError:function () {}
    }
    </code>

    Parameters:
        Object args - see exemple
    Returns:
        Bool false if browser doesn't support XHR 

nova.io.update

    Update an HTML object with a result of an XHR request

    <code>
    args {
    file:"page.htm",
    method:"POST" || "GET",
    queryString:"var1=a&var2=b",
    formNode:document.getElementById("test"),
    onError:function () {}
    }
    </code>

    Parameters:
        Object an - HTML object to update
        Object args - see exemple
    Returns:
        Bool false if browser doesn't support XHR 

nova.tooltip

    Nova's tooltip object

nova.tooltip.connect

    Add a tooltip on obj

    props exemple :
    {
    content:"hello",
    className : "myCSSStyle",
    offsetX:2,
    offsetY:5
    }

    Parameters:
        Object obj - the obj to add tooltip
        Object props - all props (see exemple) 

nova.tooltip.disconnect

    Disconnect a tooltip from obj

    Parameters:
        Object obj - the obj to disconnect tooltip's 

private
nova.tooltip._show

    Show a tooltip

    Parameters:
        Object evt 

private
nova.tooltip._hide

    Hide a tooltip

private
nova.tooltip._positionTip

    Put the tooltips in the good place !

    Parameters:
        Object event 
        Object obj 

nova.shortcut

    Nova's shortcut object

nova.shortcut.add

    Add a new key shortcut
    Parameter are like that :
    {'type':'keydown','propagate':false,'target':document,'callback':function() {}}
    parameter type : the event witch lauche the shortcut function
    parameter propagate : if true, events wont be stoped after your function and an other function can trappe him
    parameter target : the object wich have the shortcut (default : document, if target is a string, we try to found the object with nova.dom.getElementsByAnything)
    parameter callback : the function the shortcut will launch

    Parameters:
        String shortcut - the key shortcut (like CTRL + F1)
        Object opt - shortcut parameter (see exemple) 

nova.shortcut.remove

    Remove a shortcut
    Parameter are like that :
    {'type':'keydown','target':document,'callback':function() {}}
    parameter type : the event witch lauche the shortcut function
    parameter target : the object wich have the shortcut (default : document, if target is a string, we try to found the object with nova.dom.getElementsByAnything)

    Parameters:
        String shortcut - the key shortcut (like CTRL + F1)
        Object opt - shortcut parameter (see exemple) 

private
nova.shortcut._onCallShorcut

    Launched when a shortcut is fired

    Parameters:
        Object e - the events 

nova.table

    Nova's tabel namespace

nova.form

    Nova's forms namespace

nova.form.encode

    Convert froms domNode in url encoded string

    Parameters:
        Object formNode - Dom form object
    Returns:
        String URI string 

nova.form.validation

    Validation's form subnamespace

    Ajouter une contrainte a un champs (le 3eme parametre pointe sur une fonction)
    Le parametre de la fonction (3eme arguments) est le contenu du champs désigné
    Applique la classe .constraint
    nova.form.validation.connect(document.getElementById('pseudo'), 'constraint',function() { if (arguments[0].length==3) return true; else return false;});

    Verifier certaines chose avant la validation :
    Le parametre de la fonction (3eme arguments) est le contenu du champs désigné
    nova.form.validation.connect(document.getElementById('forms'), 'beforevalidate',function() { if (arguments[0].length==3) return true; else return false;});
    Forcer la selection complete du contenu
    nova.form.validation.connect(document.getElementById('pseudo'), 'selectall');

    Verifie que le contenu est bien un nombre
    Applique la classe .isnum
    nova.form.validation.connect(document.getElementById('mdp'), 'isnum');

    Verifie que le contenu est bien un nombre entier
    Applique la classe .isint
    nova.form.validation.connect(document.getElementById('mdp'), 'isint');

    Verifie que le contenu est bien du type alphabetique
    Applique la classe .isalpha
    nova.form.validation.connect(document.getElementById('mdp'), 'isalpha');

    Verifie que le contenu est bien du type alphanumérique
    Applique la classe .isalphanum
    nova.form.validation.connect(document.getElementById('mdp'), 'isalphanum');

    Verifie que le contenu est bien du type email
    Applique la classe .ismail
    nova.form.validation.connect(document.getElementById('eml'), 'ismail')

    Rendre un champs obligatoire
    Applique la classe .mendatory
    nova.form.validation.connect(document.getElementById('mdp'), 'mendatory');

    Verifier la complexité d'un mot de passe
    Applique un style qui modifie la couleur de fond de l'input
    nova.form.validation.connect(document.getElementById('mdp'), 'complexity');

    Vérifier qu'un champs est la copie d'un autre (le 3eme argument designe un objet)
    Applique la classe .copyof
    nova.form.validation.connect(document.getElementById('mdpverif'), 'copyof',document.getElementById('mdp'));

    Vérifier qu'un champs correspond bien a une expression réguliere
    Applique la classe .matchregexp
    nova.form.validation.connect(document.getElementById('mdpverif'), 'matchregexp',/[a-zA-Z]/);

    Verifier qu'un formulaire est valide (le 3eme parametre est facultatif et point sur une fonction)
    Le parametre de la fonction (3eme arguments) est un tableau qui contient les champs en erreur
    nova.form.validation.connect(document.getElementById('adduser'), 'validate',function() {alert("erreur !")});

    Rafraichi tous les evenements connecté a un objet
    document.getElementById('mdpverif').refresh();

    Pour Deconnecter un evenement d'un objet, utiliser la même syntaxe que pour le connecter mais avec le mot disconnect.
    nova.form.validation.disconnect(document.getElementById('adduser'), 'validate',function() {alert("erreur !")});

    ------------------------------------------------------
    Exemple :
    <code>
    <style type="text/css">input.mendatory,input.constraint,input.copyof,input.isnum,input.isint,input.isalpha,input.isalphanum,input.matchregexp {background-color:red;}</style>
    <form method="post" action="" id="adduser">
    <fieldset>
    <legend>Inscription</legend>
    <label> Pseudo : </label><input type="text" name="pseudo" id="pseudo" /><br />
    <label> Mot de passe : </label><input type="password" name="mdp" id="mdp" /><br />
    <label> Confirmation : </label><input type="password" name="mdpverif" id="mdpverif" /><br />
    <input type="submit" value="ok" />

    <input type="button" value="disconnect" onclick="test();" />
    <input type="button" value="refresh" onclick="test2();" />
    </fieldset>
    </form>
    <script type="text/javascript">
    nova.form.validation.connect(document.getElementById('pseudo'), 'constraint',function() { if (arguments[0].length==3) return true; else return false;});
    nova.form.validation.connect(document.getElementById('pseudo'), 'selectall');

    nova.form.validation.connect(document.getElementById('mdp'), 'selectall');
    nova.form.validation.connect(document.getElementById('mdp'), 'mendatory');
    nova.form.validation.connect(document.getElementById('mdp'), 'complexity');

    nova.form.validation.connect(document.getElementById('mdpverif'), 'selectall');
    nova.form.validation.connect(document.getElementById('mdpverif'), 'copyof',document.getElementById('mdp'));

    nova.form.validation.connect(document.getElementById('adduser'), 'validate',function() {console.log(arguments[0].length);for (i=0;i!=arguments[0].length;i++) {console.log("erreur :"+arguments[0][i]);}});

    function test() {
    nova.form.validation.disconnect(document.getElementById('pseudo'), 'constraint');
    nova.form.validation.disconnect(document.getElementById('mdp'), 'selectall');
    nova.form.validation.disconnect(document.getElementById('mdp'), 'mendatory');
    nova.form.validation.disconnect(document.getElementById('mdp'), 'complexity');
    }
    function test2() {
    document.getElementById('mdp').value="plop";
    document.getElementById('mdp').refresh();
    }

    </script>
    </code>

    Parameters:
        String methode 
    Returns:
        Bool 
        Function 

nova.form.validation.onCheckDoCallback

    execute a callback function when a field is in error
    The callback method got 2 args :
    The verification in progress (ex: isInt, isMail...)
    The status (ex : true is there is an error, false elsewhere)
    Note : in the callback method, "this" is the input object

    Parameters:
        Object obj - the object to add phrase
        Object method - the callback to execute when a field is in error 

nova.form.validation.connect

    Connect a validation method on [obj]

    Parameters:
        Object obj - the object to validate
        String methode - the validation method 

nova.form.validation.disconnect

    disconnect a validation method from [obj]

    Parameters:
        Object obj - the object to validate
        String methode - the validation method
        Object valeur 
        Object i 
        Object value 
    Returns:
        Integer -1 if not found, else return key 

Make a TABLE sortable
    props exemple :
    props = {sortedAscClassName:"ascSorted",sortedDescClassName:"descSorted", ignoreSortOnClass:"plip"}